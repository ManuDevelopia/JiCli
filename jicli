#!/usr/bin/env python
"""Jicli v0.1 - Jira Command Line Interpreter."""
import ConfigParser

import click

from jira.client import JIRA
from os.path import expanduser

# No home path has been defined
home = None
# Configuration file
config = None
# Jira connection
jira = None
# Available Issue options
actions = ['list', 'close', 'comment', 'comments', 'delete', 'query', 'browse']
# Issue filtering by
filter = ['type', 'key', 'assignee', 'reporter', 'priority', 'status', 'resolution']
# TODO: enable a place in config to add more custom filters to expand possibilities


@click.command()
@click.argument('action', nargs=1, required=False)
@click.argument('issues', nargs=-1)
@click.option('-n', default=1)
def main(action, issues, n):
    """
    JiCli - Jira Commandline Interface fast Management tool.

    This tool provides fast access to query and perform basic actions
    in Jira from the command line.
    """
    # Inits envirorment
    init_envo()

    # Check if the acction can be performed otherwise exits
    if action not in actions and action is not None:
        print 'The proposed action: ' + action + ' is not available.' + \
            ' Please check jicli with --help, to see the available options.'
        quit()

    # Connect with Jira using the readed config
    connect(config)

    # Check action to be performed
    if action in actions:
        perform(action, issues)
    elif action is None:
        # Executes the query
        query_issues()


def connect(config):
    """Connect with Jira instance described in config file."""
    global jira

    # Jira server URL
    jira_url = config.get("jira", "url_server")

    # Jira user and password
    jira_user = config.get("jira", "user")
    jira_passwd = config.get("jira", "passwd")

    # Connection to Jira
    jira = JIRA(server=(jira_url), basic_auth=(jira_user, jira_passwd))


def init_envo():
    """Read the configuration file."""
    global home
    global config

    # Getting home path
    home = expanduser("~")

    # Retrieving the configuration
    config = ConfigParser.ConfigParser()
    config.read(home + "/.config/jicli/jiclirc")

    # Parse the config reading all the sections
    # this supports diferent jira instance reading
    for section in config.sections():
        print section
    # Sections are the instances of jira


def perform(action, issues):
    """Perform the provided action to the given issues."""
    for issue in issues:
        print 'Applies ' + action + ' to ' + issue


def query_issues():
    """Retrive issues by using the provided query."""
    issues = jira.search_issues('assignee=uqasaradmin and status=Open')
    # Prints issue details
    for issue in issues:
        print_issue(issue)


def print_issue(issue):
    """Print the issue and its details in a beautifull way."""
#    print issue.key + \
#        '-' + issue.fields.issuetype.name + \
#        '-' + issue.fields.summary
#    click.secho(issue.fields.issuetype.name, fg='green', bold=True)
#    click.secho(issue.fields.summary, bg='blue', fg='white', bold=True)

    click.echo(
        click.style(issue.key) + " " +
        click.style(issue.fields.issuetype.name, fg='green') + " " +
        click.style(issue.fields.summary)
    )


if __name__ == "__main__":
    main()
